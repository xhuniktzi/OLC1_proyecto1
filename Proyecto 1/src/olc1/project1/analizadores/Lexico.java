// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Lexico

package olc1.project1.analizadores;

import java_cup.runtime.Symbol; 
import java.util.LinkedList;
import olc1.project1.errors.LexicalError;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\1\0\1\7\2\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\2\24\1\25\1\26\2\27\1\30\1\0\1\31\2\0"+
    "\1\32\1\33\1\0\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\2\46\1\62\1\46\1\63\1\64\1\65\1\0"+
    "\1\66\1\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\2\46\1\62\1\46\1\67\1\70\1\71\7\0\1\3"+
    "\71\0\1\72\2\0\1\72\155\0\2\73\115\0\1\74"+
    "\u01a8\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\17\1"+
    "\1\16\1\17\1\1\1\20\1\0\1\21\2\0\1\22"+
    "\1\0\1\23\27\0\1\24\5\0\1\25\3\0\1\22"+
    "\1\0\2\2\1\13\1\26\12\0\1\27\12\0\1\30"+
    "\1\31\10\0\1\32\11\0\1\33\24\0\1\34\1\35"+
    "\10\0\1\2\13\0\1\36\5\0\1\37\1\40\3\0"+
    "\1\41\1\42\6\0\1\43\2\0\1\44\16\0\1\45"+
    "\4\0\1\46\2\0\1\47\23\0\1\50\7\0\1\51"+
    "\6\0\1\52\1\53\1\0\1\54\3\0\1\55\2\0"+
    "\1\56\1\57\2\0\1\60\1\61\1\62\2\0\1\63"+
    "\5\0\1\64\1\65\10\0\1\66\10\0\1\67\1\0"+
    "\1\70\5\0\1\71\1\72\5\0\1\73\1\74\1\0"+
    "\1\75\1\0\1\76\1\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\267\0\364\0\75\0\75"+
    "\0\75\0\75\0\75\0\u0131\0\u016e\0\u01ab\0\75\0\75"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\75"+
    "\0\75\0\u057b\0\75\0\267\0\75\0\u05b8\0\u05f5\0\75"+
    "\0\u0632\0\75\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988"+
    "\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70"+
    "\0\u0bad\0\75\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\75"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u05b8\0\u0dd2\0\75\0\u0e0f\0\u06e9"+
    "\0\75\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\75\0\75"+
    "\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u0d58\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3"+
    "\0\u16e0\0\u171d\0\75\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\75"+
    "\0\75\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u1dc9\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\75\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\75\0\u21d6\0\u2213\0\u2250\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475"+
    "\0\75\0\u24b2\0\u24ef\0\75\0\u252c\0\u2569\0\u25a6\0\u25e3"+
    "\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb"+
    "\0\u2808\0\u2845\0\75\0\u2882\0\u28bf\0\u28fc\0\u2939\0\75"+
    "\0\u2976\0\u29b3\0\75\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4"+
    "\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\75\0\u2e77"+
    "\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\75\0\u3022"+
    "\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153\0\75\0\75\0\u3190"+
    "\0\75\0\u31cd\0\u320a\0\u3247\0\75\0\u3284\0\u32c1\0\u32fe"+
    "\0\75\0\u333b\0\u3378\0\75\0\75\0\75\0\u33b5\0\u33f2"+
    "\0\75\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\75\0\75"+
    "\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b"+
    "\0\75\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u38b6"+
    "\0\u38f3\0\75\0\u3930\0\75\0\u396d\0\u39aa\0\u39e7\0\u3a24"+
    "\0\u3a61\0\75\0\75\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92"+
    "\0\75\0\75\0\u3bcf\0\75\0\u3c0c\0\75\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\2\3\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\2\1\15"+
    "\10\16\1\17\1\2\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\2\1\27\1\30\3\2\1\31\1\32"+
    "\1\33\1\34\1\2\1\35\1\36\2\2\1\37\1\2"+
    "\1\40\1\2\1\41\1\42\3\2\1\43\1\30\1\36"+
    "\76\0\1\3\2\0\2\3\67\0\6\44\1\45\66\44"+
    "\1\46\2\0\3\46\1\0\1\47\1\50\53\46\1\51"+
    "\10\46\32\0\1\52\55\0\1\53\4\0\1\54\73\0"+
    "\1\55\1\0\10\16\115\0\1\56\75\0\1\57\56\0"+
    "\1\60\15\0\1\61\62\0\1\62\101\0\1\63\3\0"+
    "\1\64\4\0\1\65\15\0\1\65\34\0\1\66\7\0"+
    "\1\67\13\0\1\70\12\0\1\67\35\0\1\71\110\0"+
    "\1\72\1\73\57\0\1\74\3\0\1\75\3\0\1\76"+
    "\5\0\1\77\20\0\1\76\53\0\1\100\5\0\1\101"+
    "\71\0\1\102\10\0\1\103\42\0\1\104\15\0\1\105"+
    "\62\0\1\106\74\0\1\107\3\0\1\110\26\0\1\110"+
    "\41\0\1\111\55\0\10\112\3\0\27\112\3\0\1\112"+
    "\16\0\1\50\74\0\1\50\56\0\1\113\13\0\1\46"+
    "\1\0\1\114\40\0\1\46\5\0\1\46\15\0\13\53"+
    "\1\115\61\53\2\54\1\116\1\0\1\117\70\54\5\0"+
    "\1\120\13\0\10\120\37\0\1\120\43\0\1\121\107\0"+
    "\1\122\61\0\1\123\15\0\1\124\67\0\1\125\1\126"+
    "\111\0\1\127\46\0\1\130\113\0\1\131\103\0\1\132"+
    "\55\0\1\133\76\0\1\134\74\0\1\135\61\0\1\136"+
    "\17\0\1\137\15\0\1\137\53\0\1\140\63\0\1\141"+
    "\1\0\1\142\26\0\1\142\63\0\1\143\63\0\1\144"+
    "\5\0\1\145\55\0\1\146\73\0\1\147\114\0\1\150"+
    "\65\0\1\151\102\0\1\152\15\0\1\152\55\0\1\153"+
    "\76\0\1\154\70\0\1\155\3\0\1\156\57\0\1\157"+
    "\107\0\1\160\40\0\10\112\3\0\27\112\3\0\1\161"+
    "\30\0\1\162\3\0\1\163\1\164\1\165\44\0\13\166"+
    "\1\167\4\166\1\116\54\166\2\0\1\116\141\0\1\170"+
    "\65\0\1\171\70\0\1\172\112\0\1\173\27\0\1\174"+
    "\60\0\1\175\55\0\1\176\63\0\1\177\110\0\1\200"+
    "\61\0\1\201\4\0\1\202\26\0\1\202\57\0\1\203"+
    "\15\0\1\203\66\0\1\204\44\0\1\205\76\0\1\206"+
    "\113\0\1\207\72\0\1\210\74\0\1\211\55\0\1\212"+
    "\110\0\1\213\74\0\1\214\74\0\1\215\73\0\1\216"+
    "\63\0\1\217\100\0\1\220\26\0\1\220\35\0\1\221"+
    "\100\0\1\222\74\0\1\223\106\0\1\224\102\0\1\225"+
    "\53\0\1\226\56\0\2\164\1\227\76\0\4\230\65\0"+
    "\10\230\65\0\1\230\5\0\2\230\44\0\13\53\1\115"+
    "\4\53\1\231\67\53\1\115\4\53\1\232\54\53\40\0"+
    "\1\233\105\0\1\234\61\0\1\235\102\0\1\236\26\0"+
    "\1\236\54\0\1\237\5\0\1\240\65\0\1\241\102\0"+
    "\1\242\65\0\1\243\67\0\1\244\26\0\1\244\43\0"+
    "\1\245\104\0\1\246\63\0\1\247\6\0\1\250\2\0"+
    "\1\251\2\0\1\252\15\0\1\252\44\0\1\253\26\0"+
    "\1\253\56\0\1\254\53\0\1\255\104\0\1\256\26\0"+
    "\1\256\41\0\1\257\100\0\1\260\26\0\1\260\56\0"+
    "\1\261\74\0\1\262\56\0\1\263\114\0\1\264\72\0"+
    "\1\265\70\0\1\266\102\0\1\267\72\0\1\270\70\0"+
    "\1\271\57\0\1\272\61\0\3\230\142\0\1\46\23\0"+
    "\1\166\110\0\1\273\74\0\1\274\117\0\1\275\66\0"+
    "\1\276\57\0\1\277\74\0\1\300\126\0\1\301\65\0"+
    "\1\302\53\0\1\303\77\0\1\304\113\0\1\305\74\0"+
    "\1\306\54\0\1\307\3\0\1\310\26\0\1\310\35\0"+
    "\1\311\100\0\1\312\3\0\1\313\26\0\1\313\53\0"+
    "\1\314\110\0\1\315\56\0\1\316\102\0\1\317\15\0"+
    "\1\317\52\0\1\320\110\0\1\321\74\0\1\322\60\0"+
    "\1\323\77\0\1\324\71\0\1\274\60\0\1\325\102\0"+
    "\1\326\26\0\1\326\52\0\1\327\62\0\1\330\106\0"+
    "\1\274\63\0\1\331\72\0\1\332\113\0\1\333\66\0"+
    "\1\334\63\0\1\335\72\0\1\336\100\0\1\337\74\0"+
    "\1\340\70\0\1\341\111\0\1\342\102\0\1\343\55\0"+
    "\1\344\111\0\1\345\61\0\1\346\103\0\1\347\77\0"+
    "\1\350\64\0\1\351\26\0\1\351\35\0\1\352\112\0"+
    "\1\353\74\0\1\354\56\0\1\355\104\0\1\356\26\0"+
    "\1\356\56\0\1\357\53\0\1\360\100\0\1\361\111\0"+
    "\1\274\74\0\1\362\53\0\1\363\112\0\1\364\74\0"+
    "\1\365\77\0\1\366\75\0\1\367\15\0\1\367\55\0"+
    "\1\370\66\0\1\371\63\0\1\372\110\0\1\373\73\0"+
    "\1\374\57\0\1\375\120\0\1\376\74\0\1\377\71\0"+
    "\1\u0100\74\0\1\u0101\105\0\1\u0102\74\0\1\u0103\64\0"+
    "\1\u0104\15\0\1\u0104\34\0\1\u0105\115\0\1\u0106\74\0"+
    "\1\203\57\0\1\u0107\104\0\1\u0108\101\0\1\u0109\70\0"+
    "\1\u010a\63\0\1\u010b\100\0\1\u010c\26\0\1\u010c\40\0"+
    "\1\u010d\114\0\1\u010e\66\0\1\u010f\63\0\1\u0110\122\0"+
    "\1\u0111\52\0\1\u0112\26\0\1\u0112\45\0\1\u0113\26\0"+
    "\1\u0113\51\0\1\u0114\64\0\1\u0115\113\0\1\u0116\66\0"+
    "\1\u0117\75\0\1\u0118\74\0\1\u0119\77\0\1\u011a\70\0"+
    "\1\u011b\65\0\1\u011c\74\0\1\u011d\72\0\1\u011e\113\0"+
    "\1\u011f\72\0\1\u0120\76\0\1\u0121\66\0\1\u0122\57\0"+
    "\1\u0123\107\0\1\u0124\105\0\1\u0125\74\0\1\u0126\65\0"+
    "\1\u0127\100\0\1\u0128\53\0\1\u0129\100\0\1\u012a\112\0"+
    "\1\u012b\15\0\1\u012b\34\0\1\u012c\74\0\1\u012d\117\0"+
    "\1\u012e\67\0\1\u012f\77\0\1\u0130\66\0\1\u0131\74\0"+
    "\1\u0132\61\0\1\u0133\116\0\1\u0134\15\0\1\u0134\44\0"+
    "\1\u0135\26\0\1\u0135\50\0\1\u0136\77\0\1\u0137\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15433];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\5\11\3\1\2\11"+
    "\17\1\2\11\1\1\1\11\1\0\1\11\2\0\1\11"+
    "\1\0\1\11\27\0\1\11\5\0\1\11\3\0\1\1"+
    "\1\0\1\11\2\1\1\11\12\0\1\1\12\0\2\11"+
    "\10\0\1\1\11\0\1\11\24\0\2\11\10\0\1\1"+
    "\13\0\1\11\5\0\1\11\1\1\3\0\2\1\6\0"+
    "\1\11\2\0\1\11\16\0\1\11\4\0\1\11\2\0"+
    "\1\11\23\0\1\11\7\0\1\11\6\0\2\11\1\0"+
    "\1\11\3\0\1\11\2\0\1\1\1\11\2\0\3\11"+
    "\2\0\1\11\5\0\2\11\10\0\1\11\10\0\1\11"+
    "\1\0\1\11\5\0\2\11\5\0\2\11\1\0\1\11"+
    "\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[311];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public LinkedList<LexicalError> lexicalErrors;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
  lexicalErrors = new LinkedList<>();
    yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { lexicalErrors.add(new LexicalError(yytext(), yyline, (int) yychar));
            }
            // fall through
          case 64: break;
          case 2:
            { 
            }
            // fall through
          case 65: break;
          case 3:
            { yychar=1;
            }
            // fall through
          case 66: break;
          case 4:
            { return new Symbol(sym.PARSTART, yyline,(int) yychar, yytext());
            }
            // fall through
          case 67: break;
          case 5:
            { return new Symbol(sym.PAREND, yyline,(int) yychar, yytext());
            }
            // fall through
          case 68: break;
          case 6:
            { return new Symbol(sym.MULTIPLY, yyline,(int) yychar, yytext());
            }
            // fall through
          case 69: break;
          case 7:
            { return new Symbol(sym.ADD, yyline,(int) yychar, yytext());
            }
            // fall through
          case 70: break;
          case 8:
            { return new Symbol(sym.COMMA, yyline,(int) yychar, yytext());
            }
            // fall through
          case 71: break;
          case 9:
            { return new Symbol(sym.SUBSTRACT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 72: break;
          case 10:
            { return new Symbol(sym.DIVISION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 73: break;
          case 11:
            { return new Symbol(sym.NUM, yyline, (int) yychar, yytext());
            }
            // fall through
          case 74: break;
          case 12:
            { return new Symbol(sym.DOTCOMMA, yyline,(int) yychar, yytext());
            }
            // fall through
          case 75: break;
          case 13:
            { return new Symbol(sym.CLOSEQUESTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 76: break;
          case 14:
            { return new Symbol(sym.SBRACKETOPEN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 77: break;
          case 15:
            { return new Symbol(sym.SBRACKETCLOSE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 78: break;
          case 16:
            { return new Symbol(sym.OPENQUESTION, yyline, (int) yychar, yytext());
            }
            // fall through
          case 79: break;
          case 17:
            { return new Symbol(sym.STR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 80: break;
          case 18:
            { return new Symbol(sym.CHAR, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 81: break;
          case 19:
            { return new Symbol(sym.ARROW, yyline,(int) yychar, yytext());
            }
            // fall through
          case 82: break;
          case 20:
            { return new Symbol(sym.OR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 83: break;
          case 21:
            { return new Symbol(sym.IF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 84: break;
          case 22:
            { return new Symbol(sym.AND, yyline,(int) yychar, yytext());
            }
            // fall through
          case 85: break;
          case 23:
            { return new Symbol(sym.END, yyline,(int) yychar, yytext());
            }
            // fall through
          case 86: break;
          case 24:
            { return new Symbol(sym.MODULE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 87: break;
          case 25:
            { return new Symbol(sym.NOT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 88: break;
          case 26:
            { return new Symbol(sym.ID, yyline, (int) yychar, (yytext()).substring(1,yytext().length()-1));
            }
            // fall through
          case 89: break;
          case 27:
            { return new Symbol(sym.AS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 90: break;
          case 28:
            { return new Symbol(sym.ELIF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 91: break;
          case 29:
            { return new Symbol(sym.FOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 92: break;
          case 30:
            { return new Symbol(sym.BOOLEAN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 93: break;
          case 31:
            { return new Symbol(sym.DO, yyline,(int) yychar, yytext());
            }
            // fall through
          case 94: break;
          case 32:
            { return new Symbol(sym.TO, yyline,(int) yychar, yytext());
            }
            // fall through
          case 95: break;
          case 33:
            { return new Symbol(sym.MAJOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 96: break;
          case 34:
            { return new Symbol(sym.MINOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 97: break;
          case 35:
            { return new Symbol(sym.SWITCH, yyline,(int) yychar, yytext());
            }
            // fall through
          case 98: break;
          case 36:
            { return new Symbol(sym.TYPEDEF, yyline, (int) yychar, yytext());
            }
            // fall through
          case 99: break;
          case 37:
            { return new Symbol(sym.ENDIF, yyline,(int) yychar, yytext());
            }
            // fall through
          case 100: break;
          case 38:
            { return new Symbol(sym.START, yyline,(int) yychar, yytext());
            }
            // fall through
          case 101: break;
          case 39:
            { return new Symbol(sym.DEFPROCEDURE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 102: break;
          case 40:
            { return new Symbol(sym.FUNCTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 103: break;
          case 41:
            { return new Symbol(sym.REPEAT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 104: break;
          case 42:
            { return new Symbol(sym.EXEC, yyline,(int) yychar, yytext());
            }
            // fall through
          case 105: break;
          case 43:
            { return new Symbol(sym.THEN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 106: break;
          case 44:
            { return new Symbol(sym.EQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 107: break;
          case 45:
            { return new Symbol(sym.ENDFOR, yyline,(int) yychar, yytext());
            }
            // fall through
          case 108: break;
          case 46:
            { return new Symbol(sym.PRINT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 109: break;
          case 47:
            { return new Symbol(sym.ENTER, yyline,(int) yychar, yytext());
            }
            // fall through
          case 110: break;
          case 48:
            { return new Symbol(sym.WHILE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 111: break;
          case 49:
            { return new Symbol(sym.POW, yyline,(int) yychar, yytext());
            }
            // fall through
          case 112: break;
          case 50:
            { return new Symbol(sym.RETURN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 113: break;
          case 51:
            { return new Symbol(sym.WITH_VALUE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 114: break;
          case 52:
            { return new Symbol(sym.ENDSWITCH, yyline,(int) yychar, yytext());
            }
            // fall through
          case 115: break;
          case 53:
            { return new Symbol(sym.ENDREPEAT, yyline,(int) yychar, yytext());
            }
            // fall through
          case 116: break;
          case 54:
            { return new Symbol(sym.ENDPROCEDURE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 117: break;
          case 55:
            { return new Symbol(sym.ENDFUNCTION, yyline,(int) yychar, yytext());
            }
            // fall through
          case 118: break;
          case 56:
            { return new Symbol(sym.PRINTLN, yyline,(int) yychar, yytext());
            }
            // fall through
          case 119: break;
          case 57:
            { return new Symbol(sym.NOTEQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 120: break;
          case 58:
            { return new Symbol(sym.ENDWHILE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 121: break;
          case 59:
            { return new Symbol(sym.MAJOREQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 122: break;
          case 60:
            { return new Symbol(sym.MINOREQUALS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 123: break;
          case 61:
            { return new Symbol(sym.PARAMS, yyline,(int) yychar, yytext());
            }
            // fall through
          case 124: break;
          case 62:
            { return new Symbol(sym.WITHINCREMENTAL, yyline,(int) yychar, yytext());
            }
            // fall through
          case 125: break;
          case 63:
            { return new Symbol(sym.ELSE, yyline,(int) yychar, yytext());
            }
            // fall through
          case 126: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
