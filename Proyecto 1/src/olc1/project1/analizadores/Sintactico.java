
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package olc1.project1.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import olc1.project1.errors.SintaxError;
import olc1.project1.instructions.Statement;
import olc1.project1.instructions.Operation;
import olc1.project1.instructions.Param;
import olc1.project1.instructions.Declaration;
import olc1.project1.instructions.Assignment;
import olc1.project1.instructions.While;
import olc1.project1.instructions.For;
import olc1.project1.instructions.Repeat;
import olc1.project1.instructions.Print;
import olc1.project1.instructions.Println;
import olc1.project1.instructions.Return;
import olc1.project1.instructions.Procedure;
import olc1.project1.instructions.Function;
import olc1.project1.instructions.Case;
import olc1.project1.instructions.Elif;
import olc1.project1.instructions.If;
import olc1.project1.instructions.Switch;
import olc1.project1.instructions.Execute;
import olc1.project1.enums.EnumOperations;
import olc1.project1.enums.EnumTerminals;
import olc1.project1.enums.EnumUnitaryOperations;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\005\000\002\026" +
    "\004\000\002\026\003\000\002\025\003\000\002\025\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\011\000" +
    "\002\004\006\000\002\004\003\000\002\004\003\000\002" +
    "\004\007\000\002\004\006\000\002\004\006\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\007\000\002\004\012\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\005\000\002\024\006\000\002\024\012\000\002\024\007" +
    "\000\002\024\013\000\002\022\003\000\002\022\005\000" +
    "\002\023\004\000\002\023\003\000\002\020\007\000\002" +
    "\020\011\000\002\020\010\000\002\020\012\000\002\021" +
    "\013\000\002\021\015\000\002\021\012\000\002\021\014" +
    "\000\002\007\006\000\002\007\004\000\002\010\005\000" +
    "\002\010\003\000\002\006\005\000\002\006\003\000\002" +
    "\011\005\000\002\011\006\000\002\012\007\000\002\012" +
    "\006\000\002\013\010\000\002\013\007\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\007\000\002\014" +
    "\007\000\002\014\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\017\004\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\031\005\001\002\000\004\002\315\001" +
    "\002\000\034\003\025\034\021\037\016\044\015\047\030" +
    "\053\012\055\031\060\011\063\014\065\006\066\024\067" +
    "\023\075\020\001\002\000\004\075\303\001\002\000\036" +
    "\003\ufffd\032\ufffd\034\ufffd\037\ufffd\044\ufffd\047\ufffd\053" +
    "\ufffd\055\ufffd\060\ufffd\063\ufffd\065\ufffd\066\ufffd\067\ufffd" +
    "\075\ufffd\001\002\000\006\015\156\033\300\001\002\000" +
    "\004\075\267\001\002\000\022\012\047\022\040\027\045" +
    "\070\035\071\037\072\041\073\051\075\044\001\002\000" +
    "\036\003\ufffc\032\ufffc\034\ufffc\037\ufffc\044\ufffc\047\ufffc" +
    "\053\ufffc\055\ufffc\060\ufffc\063\ufffc\065\ufffc\066\ufffc\067" +
    "\ufffc\075\ufffc\001\002\000\004\075\235\001\002\000\022" +
    "\012\047\022\040\027\045\070\035\071\037\072\041\073" +
    "\051\075\044\001\002\000\022\012\047\022\040\027\045" +
    "\070\035\071\037\072\041\073\051\075\044\001\002\000" +
    "\036\003\025\032\165\034\021\037\016\044\015\047\030" +
    "\053\012\055\031\060\011\063\014\065\006\066\024\067" +
    "\023\075\020\001\002\000\010\015\uffcf\033\uffcf\035\uffcf" +
    "\001\002\000\004\075\020\001\002\000\064\003\ufff7\017" +
    "\ufff7\032\ufff7\034\ufff7\037\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\046\ufff7\047\ufff7\051\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\075\ufff7\001\002\000\022\012" +
    "\047\022\040\027\045\070\035\071\037\072\041\073\051" +
    "\075\044\001\002\000\022\012\047\022\040\027\045\070" +
    "\035\071\037\072\041\073\051\075\044\001\002\000\022" +
    "\016\143\041\145\046\146\051\141\054\144\056\140\061" +
    "\147\064\142\001\002\000\064\003\ufff6\017\ufff6\032\ufff6" +
    "\034\ufff6\037\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\046" +
    "\ufff6\047\ufff6\051\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\061\ufff6\063\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\067\ufff6\075\ufff6\001\002\000\036\003\ufffe\032\ufffe" +
    "\034\ufffe\037\ufffe\044\ufffe\047\ufffe\053\ufffe\055\ufffe\060" +
    "\ufffe\063\ufffe\065\ufffe\066\ufffe\067\ufffe\075\ufffe\001\002" +
    "\000\004\075\121\001\002\000\032\003\025\034\021\037" +
    "\016\044\015\047\030\053\012\055\031\056\034\065\006" +
    "\066\024\067\023\075\020\001\002\000\032\003\025\034" +
    "\021\037\016\044\015\047\030\053\012\055\031\056\117" +
    "\065\006\066\024\067\023\075\020\001\002\000\052\003" +
    "\ufffa\017\ufffa\034\ufffa\037\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\046\ufffa\047\ufffa\051\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\061\ufffa\065\ufffa\066\ufffa\067\ufffa\075\ufffa" +
    "\001\002\000\022\012\047\022\040\027\045\070\035\071" +
    "\037\072\041\073\051\075\044\001\002\000\142\003\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\032" +
    "\uffbd\034\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\075" +
    "\uffbd\077\uffbd\001\002\000\142\003\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\030\uffc8\032\uffc8\034\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\075\uffc8\077\uffc8\001" +
    "\002\000\142\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\030\uffb2\032\uffb2\034\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2" +
    "\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056" +
    "\uffb2\057\uffb2\060\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\066\uffb2\067\uffb2\075\uffb2\077\uffb2\001\002\000\022\012" +
    "\047\022\040\027\045\070\035\071\037\072\041\073\051" +
    "\075\044\001\002\000\142\003\uffb4\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\030\uffb4\032\uffb4\034\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\067\uffb4\075\uffb4\077\uffb4\001\002" +
    "\000\142\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\030\uffc5\032\uffc5\034\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\061\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\075\uffc5\077\uffc5\001\002\000\142\003\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\032" +
    "\uffc6\034\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6" +
    "\061\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\075" +
    "\uffc6\077\uffc6\001\002\000\142\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\013\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\026\uffb3\030\uffb3\032\uffb3\034\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\063\uffb3" +
    "\064\uffb3\065\uffb3\066\uffb3\067\uffb3\075\uffb3\077\uffb3\001" +
    "\002\000\022\012\047\022\040\027\045\070\035\071\037" +
    "\072\041\073\051\075\044\001\002\000\120\003\ufff2\004" +
    "\062\005\056\006\066\007\067\010\065\011\057\013\070" +
    "\014\053\017\ufff2\021\063\022\061\023\060\024\064\025" +
    "\054\026\055\032\ufff2\034\ufff2\037\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\046\ufff2\047\ufff2\051\ufff2\053\ufff2\054" +
    "\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\067\ufff2\075\ufff2\001\002\000" +
    "\022\012\047\022\040\027\045\070\035\071\037\072\041" +
    "\073\051\075\044\001\002\000\142\003\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\032\uffc7\034\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\075\uffc7\077\uffc7" +
    "\001\002\000\142\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\030\uffb1\032\uffb1\034\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\067\uffb1\075\uffb1\077\uffb1\001\002\000\142" +
    "\003\uffaf\004\062\005\056\006\066\007\067\010\065\011" +
    "\057\013\070\014\053\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\063\022\061\023\060\024\064\025\054\026\055\030" +
    "\uffaf\032\uffaf\034\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf" +
    "\060\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067" +
    "\uffaf\075\uffaf\077\uffaf\001\002\000\022\012\047\022\040" +
    "\027\045\070\035\071\037\072\041\073\051\075\044\001" +
    "\002\000\004\076\107\001\002\000\004\076\104\001\002" +
    "\000\022\012\047\022\040\027\045\070\035\071\037\072" +
    "\041\073\051\075\044\001\002\000\022\012\047\022\040" +
    "\027\045\070\035\071\037\072\041\073\051\075\044\001" +
    "\002\000\022\012\047\022\040\027\045\070\035\071\037" +
    "\072\041\073\051\075\044\001\002\000\022\012\047\022" +
    "\040\027\045\070\035\071\037\072\041\073\051\075\044" +
    "\001\002\000\022\012\047\022\040\027\045\070\035\071" +
    "\037\072\041\073\051\075\044\001\002\000\022\012\047" +
    "\022\040\027\045\070\035\071\037\072\041\073\051\075" +
    "\044\001\002\000\022\012\047\022\040\027\045\070\035" +
    "\071\037\072\041\073\051\075\044\001\002\000\022\012" +
    "\047\022\040\027\045\070\035\071\037\072\041\073\051" +
    "\075\044\001\002\000\022\012\047\022\040\027\045\070" +
    "\035\071\037\072\041\073\051\075\044\001\002\000\022" +
    "\012\047\022\040\027\045\070\035\071\037\072\041\073" +
    "\051\075\044\001\002\000\022\012\047\022\040\027\045" +
    "\070\035\071\037\072\041\073\051\075\044\001\002\000" +
    "\142\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\063\022\061\023\060\024\064\025\054\026\055" +
    "\030\uffb5\032\uffb5\034\uffb5\037\uffb5\040\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\075\uffb5\077\uffb5\001\002\000\142\003\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\013\070" +
    "\014\053\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\063\022" +
    "\061\023\060\024\064\025\054\026\055\030\uffb9\032\uffb9" +
    "\034\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061" +
    "\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\075\uffb9" +
    "\077\uffb9\001\002\000\142\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\013\070\014\053\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\021\063\022\061\023\060\024" +
    "\064\025\054\026\055\030\uffba\032\uffba\034\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\075\uffba\077\uffba\001\002" +
    "\000\142\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\013\070\014\053\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\063\022\061\023\060\024\064\025\054\026" +
    "\055\030\uffb8\032\uffb8\034\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\063\uffb8\064\uffb8\065\uffb8\066" +
    "\uffb8\067\uffb8\075\uffb8\077\uffb8\001\002\000\142\003\uffc0" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\054\026\055\030\uffc0\032" +
    "\uffc0\034\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\075" +
    "\uffc0\077\uffc0\001\002\000\142\003\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\060" +
    "\024\064\025\054\026\055\030\uffc3\032\uffc3\034\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\067\uffc3\075\uffc3\077\uffc3\001" +
    "\002\000\142\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\013\070\014\053\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\021\063\022\061\023\060\024\064\025\054" +
    "\026\055\030\uffbc\032\uffbc\034\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\066\uffbc\067\uffbc\075\uffbc\077\uffbc\001\002\000\142\003" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\060\024\064\025\054\026\055\030\uffc2" +
    "\032\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\075\uffc2\077\uffc2\001\002\000\142\003\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\054\026\055\030\uffc1\032\uffc1\034\uffc1" +
    "\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1" +
    "\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\075\uffc1\077\uffc1" +
    "\001\002\000\142\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\013\070\014\053\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\063\022\061\023\060\024\064\025" +
    "\054\026\055\030\uffb7\032\uffb7\034\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7" +
    "\056\uffb7\057\uffb7\060\uffb7\061\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\075\uffb7\077\uffb7\001\002\000\142" +
    "\003\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011" +
    "\uffbb\013\070\014\053\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\063\022\061\023\060\024\064\025\054\026\055\030" +
    "\uffbb\032\uffbb\034\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\075\uffbb\077\uffbb\001\002\000\022\012\047\022\040" +
    "\027\045\070\035\071\037\072\041\073\051\075\044\001" +
    "\002\000\040\004\062\005\056\006\066\007\067\010\065" +
    "\011\057\013\070\014\053\021\063\022\061\023\060\024" +
    "\064\025\054\026\055\077\106\001\002\000\142\003\uffbe" +
    "\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\032" +
    "\uffbe\034\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\075" +
    "\uffbe\077\uffbe\001\002\000\022\012\047\022\040\027\045" +
    "\070\035\071\037\072\041\073\051\075\044\001\002\000" +
    "\040\004\062\005\056\006\066\007\067\010\065\011\057" +
    "\013\070\014\053\021\063\022\061\023\060\024\064\025" +
    "\054\026\055\077\111\001\002\000\142\003\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\032\uffbf\034" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\075\uffbf\077" +
    "\uffbf\001\002\000\142\003\uffb6\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\063\022\061\023\060\024\064" +
    "\025\054\026\055\030\uffb6\032\uffb6\034\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\067\uffb6\075\uffb6\077\uffb6\001\002\000" +
    "\040\004\062\005\056\006\066\007\067\010\065\011\057" +
    "\013\070\014\053\021\063\022\061\023\060\024\064\025" +
    "\054\026\055\030\114\001\002\000\142\003\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\032\uffc4\034" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\075\uffc4\077" +
    "\uffc4\001\002\000\142\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\060\024\064" +
    "\025\054\026\055\030\uffb0\032\uffb0\034\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\067\uffb0\075\uffb0\077\uffb0\001\002\000" +
    "\052\003\ufffb\017\ufffb\034\ufffb\037\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\046\ufffb\047\ufffb\051\ufffb\053\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\061\ufffb\065\ufffb\066\ufffb\067\ufffb" +
    "\075\ufffb\001\002\000\022\012\047\022\040\027\045\070" +
    "\035\071\037\072\041\073\051\075\044\001\002\000\120" +
    "\003\ufff3\004\062\005\056\006\066\007\067\010\065\011" +
    "\057\013\070\014\053\017\ufff3\021\063\022\061\023\060" +
    "\024\064\025\054\026\055\032\ufff3\034\ufff3\037\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\046\ufff3\047\ufff3\051\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\075\ufff3" +
    "\001\002\000\004\033\122\001\002\000\022\012\047\022" +
    "\040\027\045\070\035\071\037\072\041\073\051\075\044" +
    "\001\002\000\040\004\062\005\056\006\066\007\067\010" +
    "\065\011\057\013\070\014\053\021\063\022\061\023\060" +
    "\024\064\025\054\026\055\050\124\001\002\000\022\012" +
    "\047\022\040\027\045\070\035\071\037\072\041\073\051" +
    "\075\044\001\002\000\042\004\062\005\056\006\066\007" +
    "\067\010\065\011\057\013\070\014\053\021\063\022\061" +
    "\023\060\024\064\025\054\026\055\045\127\052\126\001" +
    "\002\000\004\070\133\001\002\000\032\003\025\034\021" +
    "\037\016\044\015\047\030\051\131\053\012\055\031\065" +
    "\006\066\024\067\023\075\020\001\002\000\032\003\025" +
    "\034\021\037\016\044\015\047\030\051\132\053\012\055" +
    "\031\065\006\066\024\067\023\075\020\001\002\000\064" +
    "\003\uffd6\017\uffd6\032\uffd6\034\uffd6\037\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6\051\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\066\uffd6\067\uffd6\075\uffd6\001\002" +
    "\000\064\003\uffd8\017\uffd8\032\uffd8\034\uffd8\037\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\047\uffd8\051\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\075\uffd8" +
    "\001\002\000\004\045\134\001\002\000\032\003\025\034" +
    "\021\037\016\044\015\047\030\051\136\053\012\055\031" +
    "\065\006\066\024\067\023\075\020\001\002\000\032\003" +
    "\025\034\021\037\016\044\015\047\030\051\137\053\012" +
    "\055\031\065\006\066\024\067\023\075\020\001\002\000" +
    "\064\003\uffd5\017\uffd5\032\uffd5\034\uffd5\037\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\046\uffd5\047\uffd5\051\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\075\uffd5\001" +
    "\002\000\064\003\uffd7\017\uffd7\032\uffd7\034\uffd7\037\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\047\uffd7\051" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\075" +
    "\uffd7\001\002\000\022\012\047\022\040\027\045\070\035" +
    "\071\037\072\041\073\051\075\044\001\002\000\064\003" +
    "\uffea\017\uffea\032\uffea\034\uffea\037\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\046\uffea\047\uffea\051\uffea\053\uffea\054" +
    "\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\075\uffea\001\002\000" +
    "\064\003\uffe7\017\uffe7\032\uffe7\034\uffe7\037\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\046\uffe7\047\uffe7\051\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\075\uffe7\001" +
    "\002\000\064\003\uffec\017\uffec\032\uffec\034\uffec\037\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\046\uffec\047\uffec\051" +
    "\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec" +
    "\061\uffec\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\075" +
    "\uffec\001\002\000\064\003\uffe9\017\uffe9\032\uffe9\034\uffe9" +
    "\037\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047" +
    "\uffe9\051\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\075\uffe9\001\002\000\064\003\uffeb\017\uffeb\032\uffeb" +
    "\034\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\046" +
    "\uffeb\047\uffeb\051\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\067\uffeb\075\uffeb\001\002\000\064\003\uffe6\017\uffe6" +
    "\032\uffe6\034\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\046\uffe6\047\uffe6\051\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\075\uffe6\001\002\000\064\003\uffe8" +
    "\017\uffe8\032\uffe8\034\uffe8\037\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\046\uffe8\047\uffe8\051\uffe8\053\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\075\uffe8\001\002\000\120" +
    "\003\uffe5\004\062\005\056\006\066\007\067\010\065\011" +
    "\057\013\070\014\053\017\uffe5\021\063\022\061\023\060" +
    "\024\064\025\054\026\055\032\uffe5\034\uffe5\037\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\046\uffe5\047\uffe5\051\uffe5" +
    "\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067\uffe5\075\uffe5" +
    "\001\002\000\040\004\062\005\056\006\066\007\067\010" +
    "\065\011\057\013\070\014\053\016\152\021\063\022\061" +
    "\023\060\024\064\025\054\026\055\001\002\000\064\003" +
    "\ufff0\017\ufff0\032\ufff0\034\ufff0\037\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\046\ufff0\047\ufff0\051\ufff0\053\ufff0\054" +
    "\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\063\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\067\ufff0\075\ufff0\001\002\000" +
    "\040\004\062\005\056\006\066\007\067\010\065\011\057" +
    "\013\070\014\053\016\154\021\063\022\061\023\060\024" +
    "\064\025\054\026\055\001\002\000\064\003\uffef\017\uffef" +
    "\032\uffef\034\uffef\037\uffef\041\uffef\042\uffef\043\uffef\044" +
    "\uffef\046\uffef\047\uffef\051\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\075\uffef\001\002\000\006\015\156" +
    "\035\157\001\002\000\004\075\164\001\002\000\004\074" +
    "\160\001\002\000\004\036\161\001\002\000\022\012\047" +
    "\022\040\027\045\070\035\071\037\072\041\073\051\075" +
    "\044\001\002\000\040\004\062\005\056\006\066\007\067" +
    "\010\065\011\057\013\070\014\053\016\163\021\063\022" +
    "\061\023\060\024\064\025\054\026\055\001\002\000\064" +
    "\003\ufff9\017\ufff9\032\ufff9\034\ufff9\037\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\051\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\075\ufff9\001\002" +
    "\000\010\015\uffd0\033\uffd0\035\uffd0\001\002\000\004\002" +
    "\000\001\002\000\036\003\uffff\032\uffff\034\uffff\037\uffff" +
    "\044\uffff\047\uffff\053\uffff\055\uffff\060\uffff\063\uffff\065" +
    "\uffff\066\uffff\067\uffff\075\uffff\001\002\000\040\004\062" +
    "\005\056\006\066\007\067\010\065\011\057\013\070\014" +
    "\053\021\063\022\061\023\060\024\064\025\054\026\055" +
    "\040\170\001\002\000\030\003\025\034\021\037\016\044" +
    "\015\047\030\053\012\055\031\065\006\066\024\067\023" +
    "\075\020\001\002\000\036\003\025\034\021\037\016\041" +
    "\173\042\172\043\174\044\015\047\030\053\012\055\031" +
    "\065\006\066\024\067\023\075\020\001\002\000\030\003" +
    "\025\034\021\037\016\044\015\047\030\053\012\055\031" +
    "\065\006\066\024\067\023\075\020\001\002\000\064\003" +
    "\uffdc\017\uffdc\032\uffdc\034\uffdc\037\uffdc\041\uffdc\042\uffdc" +
    "\043\uffdc\044\uffdc\046\uffdc\047\uffdc\051\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\075\uffdc\001\002\000" +
    "\022\012\047\022\040\027\045\070\035\071\037\072\041" +
    "\073\051\075\044\001\002\000\010\041\200\042\176\043" +
    "\177\001\002\000\030\003\025\034\021\037\016\044\015" +
    "\047\030\053\012\055\031\065\006\066\024\067\023\075" +
    "\020\001\002\000\022\012\047\022\040\027\045\070\035" +
    "\071\037\072\041\073\051\075\044\001\002\000\064\003" +
    "\uffda\017\uffda\032\uffda\034\uffda\037\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\046\uffda\047\uffda\051\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\075\uffda\001\002\000" +
    "\040\004\062\005\056\006\066\007\067\010\065\011\057" +
    "\013\070\014\053\021\063\022\061\023\060\024\064\025" +
    "\054\026\055\040\202\001\002\000\030\003\025\034\021" +
    "\037\016\044\015\047\030\053\012\055\031\065\006\066" +
    "\024\067\023\075\020\001\002\000\036\003\025\034\021" +
    "\037\016\041\uffcc\042\uffcc\043\uffcc\044\015\047\030\053" +
    "\012\055\031\065\006\066\024\067\023\075\020\001\002" +
    "\000\032\003\025\034\021\037\016\041\205\044\015\047" +
    "\030\053\012\055\031\065\006\066\024\067\023\075\020" +
    "\001\002\000\064\003\uffd9\017\uffd9\032\uffd9\034\uffd9\037" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9" +
    "\075\uffd9\001\002\000\040\004\062\005\056\006\066\007" +
    "\067\010\065\011\057\013\070\014\053\021\063\022\061" +
    "\023\060\024\064\025\054\026\055\040\207\001\002\000" +
    "\030\003\025\034\021\037\016\044\015\047\030\053\012" +
    "\055\031\065\006\066\024\067\023\075\020\001\002\000" +
    "\036\003\025\034\021\037\016\041\uffcb\042\uffcb\043\uffcb" +
    "\044\015\047\030\053\012\055\031\065\006\066\024\067" +
    "\023\075\020\001\002\000\032\003\025\034\021\037\016" +
    "\041\212\044\015\047\030\053\012\055\031\065\006\066" +
    "\024\067\023\075\020\001\002\000\064\003\uffdb\017\uffdb" +
    "\032\uffdb\034\uffdb\037\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\046\uffdb\047\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\065" +
    "\uffdb\066\uffdb\067\uffdb\075\uffdb\001\002\000\040\004\062" +
    "\005\056\006\066\007\067\010\065\011\057\013\070\014" +
    "\053\021\063\022\061\023\060\024\064\025\054\026\055" +
    "\045\214\001\002\000\004\017\216\001\002\000\010\017" +
    "\225\042\223\046\224\001\002\000\022\012\047\022\040" +
    "\027\045\070\035\071\037\072\041\073\051\075\044\001" +
    "\002\000\040\004\062\005\056\006\066\007\067\010\065" +
    "\011\057\013\070\014\053\020\220\021\063\022\061\023" +
    "\060\024\064\025\054\026\055\001\002\000\004\040\221" +
    "\001\002\000\030\003\025\034\021\037\016\044\015\047" +
    "\030\053\012\055\031\065\006\066\024\067\023\075\020" +
    "\001\002\000\036\003\025\017\uffc9\034\021\037\016\042" +
    "\uffc9\044\015\046\uffc9\047\030\053\012\055\031\065\006" +
    "\066\024\067\023\075\020\001\002\000\004\040\232\001" +
    "\002\000\064\003\uffee\017\uffee\032\uffee\034\uffee\037\uffee" +
    "\041\uffee\042\uffee\043\uffee\044\uffee\046\uffee\047\uffee\051" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee" +
    "\061\uffee\063\uffee\064\uffee\065\uffee\066\uffee\067\uffee\075" +
    "\uffee\001\002\000\022\012\047\022\040\027\045\070\035" +
    "\071\037\072\041\073\051\075\044\001\002\000\040\004" +
    "\062\005\056\006\066\007\067\010\065\011\057\013\070" +
    "\014\053\020\227\021\063\022\061\023\060\024\064\025" +
    "\054\026\055\001\002\000\004\040\230\001\002\000\030" +
    "\003\025\034\021\037\016\044\015\047\030\053\012\055" +
    "\031\065\006\066\024\067\023\075\020\001\002\000\036" +
    "\003\025\017\uffca\034\021\037\016\042\uffca\044\015\046" +
    "\uffca\047\030\053\012\055\031\065\006\066\024\067\023" +
    "\075\020\001\002\000\030\003\025\034\021\037\016\044" +
    "\015\047\030\053\012\055\031\065\006\066\024\067\023" +
    "\075\020\001\002\000\032\003\025\034\021\037\016\044" +
    "\015\046\234\047\030\053\012\055\031\065\006\066\024" +
    "\067\023\075\020\001\002\000\064\003\uffed\017\uffed\032" +
    "\uffed\034\uffed\037\uffed\041\uffed\042\uffed\043\uffed\044\uffed" +
    "\046\uffed\047\uffed\051\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\063\uffed\064\uffed\065\uffed" +
    "\066\uffed\067\uffed\075\uffed\001\002\000\004\074\236\001" +
    "\002\000\034\003\025\034\021\037\016\044\015\047\030" +
    "\053\012\055\031\057\240\062\242\065\006\066\024\067" +
    "\023\075\020\001\002\000\034\003\uffe0\034\uffe0\037\uffe0" +
    "\044\uffe0\047\uffe0\053\uffe0\055\uffe0\057\uffe0\064\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\075\uffe0\001\002\000\022\012\047" +
    "\022\040\027\045\070\035\071\037\072\041\073\051\075" +
    "\044\001\002\000\034\003\uffdd\034\uffdd\037\uffdd\044\uffdd" +
    "\047\uffdd\053\uffdd\055\uffdd\057\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\067\uffdd\075\uffdd\001\002\000\004\027\246\001\002" +
    "\000\034\003\025\034\021\037\016\044\015\047\030\053" +
    "\012\055\031\057\240\064\245\065\006\066\024\067\023" +
    "\075\020\001\002\000\034\003\uffde\034\uffde\037\uffde\044" +
    "\uffde\047\uffde\053\uffde\055\uffde\057\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\075\uffde\001\002\000\036\003\uffe2\032" +
    "\uffe2\034\uffe2\037\uffe2\044\uffe2\047\uffe2\053\uffe2\055\uffe2" +
    "\060\uffe2\063\uffe2\065\uffe2\066\uffe2\067\uffe2\075\uffe2\001" +
    "\002\000\004\075\247\001\002\000\004\074\257\001\002" +
    "\000\006\015\251\030\252\001\002\000\004\075\255\001" +
    "\002\000\032\003\025\034\021\037\016\044\015\047\030" +
    "\053\012\055\031\057\240\065\006\066\024\067\023\075" +
    "\020\001\002\000\034\003\025\034\021\037\016\044\015" +
    "\047\030\053\012\055\031\057\240\064\254\065\006\066" +
    "\024\067\023\075\020\001\002\000\036\003\uffe1\032\uffe1" +
    "\034\uffe1\037\uffe1\044\uffe1\047\uffe1\053\uffe1\055\uffe1\060" +
    "\uffe1\063\uffe1\065\uffe1\066\uffe1\067\uffe1\075\uffe1\001\002" +
    "\000\004\074\256\001\002\000\006\015\uffd4\030\uffd4\001" +
    "\002\000\006\015\uffd3\030\uffd3\001\002\000\040\004\062" +
    "\005\056\006\066\007\067\010\065\011\057\013\070\014" +
    "\053\016\261\021\063\022\061\023\060\024\064\025\054" +
    "\026\055\001\002\000\034\003\uffdf\034\uffdf\037\uffdf\044" +
    "\uffdf\047\uffdf\053\uffdf\055\uffdf\057\uffdf\064\uffdf\065\uffdf" +
    "\066\uffdf\067\uffdf\075\uffdf\001\002\000\040\004\062\005" +
    "\056\006\066\007\067\010\065\011\057\013\070\014\053" +
    "\021\063\022\061\023\060\024\064\025\054\026\055\045" +
    "\263\001\002\000\032\003\025\034\021\037\016\044\015" +
    "\047\030\053\012\054\265\055\031\065\006\066\024\067" +
    "\023\075\020\001\002\000\032\003\025\034\021\037\016" +
    "\044\015\047\030\053\012\054\266\055\031\065\006\066" +
    "\024\067\023\075\020\001\002\000\064\003\ufff4\017\ufff4" +
    "\032\ufff4\034\ufff4\037\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\046\ufff4\047\ufff4\051\ufff4\053\ufff4\054\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\063\ufff4\064\ufff4\065" +
    "\ufff4\066\ufff4\067\ufff4\075\ufff4\001\002\000\064\003\ufff5" +
    "\017\ufff5\032\ufff5\034\ufff5\037\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\046\ufff5\047\ufff5\051\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\075\ufff5\001\002\000\032" +
    "\003\025\034\021\037\016\044\015\047\030\053\012\055" +
    "\031\062\270\065\006\066\024\067\023\075\020\001\002" +
    "\000\004\027\273\001\002\000\032\003\025\034\021\037" +
    "\016\044\015\047\030\053\012\055\031\061\272\065\006" +
    "\066\024\067\023\075\020\001\002\000\036\003\uffe4\032" +
    "\uffe4\034\uffe4\037\uffe4\044\uffe4\047\uffe4\053\uffe4\055\uffe4" +
    "\060\uffe4\063\uffe4\065\uffe4\066\uffe4\067\uffe4\075\uffe4\001" +
    "\002\000\004\075\247\001\002\000\006\015\251\030\275" +
    "\001\002\000\030\003\025\034\021\037\016\044\015\047" +
    "\030\053\012\055\031\065\006\066\024\067\023\075\020" +
    "\001\002\000\032\003\025\034\021\037\016\044\015\047" +
    "\030\053\012\055\031\061\277\065\006\066\024\067\023" +
    "\075\020\001\002\000\036\003\uffe3\032\uffe3\034\uffe3\037" +
    "\uffe3\044\uffe3\047\uffe3\053\uffe3\055\uffe3\060\uffe3\063\uffe3" +
    "\065\uffe3\066\uffe3\067\uffe3\075\uffe3\001\002\000\022\012" +
    "\047\022\040\027\045\070\035\071\037\072\041\073\051" +
    "\075\044\001\002\000\040\004\062\005\056\006\066\007" +
    "\067\010\065\011\057\013\070\014\053\016\302\021\063" +
    "\022\061\023\060\024\064\025\054\026\055\001\002\000" +
    "\064\003\ufff8\017\ufff8\032\ufff8\034\ufff8\037\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\046\ufff8\047\ufff8\051\ufff8\053" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\075\ufff8\001" +
    "\002\000\004\027\306\001\002\000\004\016\305\001\002" +
    "\000\064\003\ufff1\017\ufff1\032\ufff1\034\ufff1\037\ufff1\041" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\046\ufff1\047\ufff1\051\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\075\ufff1" +
    "\001\002\000\024\012\047\022\040\027\045\030\310\070" +
    "\035\071\037\072\041\073\051\075\044\001\002\000\006" +
    "\015\312\030\313\001\002\000\004\016\uffce\001\002\000" +
    "\042\004\062\005\056\006\066\007\067\010\065\011\057" +
    "\013\070\014\053\015\uffd1\021\063\022\061\023\060\024" +
    "\064\025\054\026\055\030\uffd1\001\002\000\022\012\047" +
    "\022\040\027\045\070\035\071\037\072\041\073\051\075" +
    "\044\001\002\000\004\016\uffcd\001\002\000\042\004\062" +
    "\005\056\006\066\007\067\010\065\011\057\013\070\014" +
    "\053\015\uffd2\021\063\022\061\023\060\024\064\025\054" +
    "\026\055\030\uffd2\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\004\006\006\007\020\021\021\025\024\012\025\026" +
    "\026\016\001\001\000\004\011\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\261" +
    "\014\042\015\041\016\035\017\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\212\014\042\015\041" +
    "\016\035\017\047\001\001\000\014\005\166\014\042\015" +
    "\041\016\035\017\047\001\001\000\016\004\006\006\007" +
    "\020\021\021\025\024\012\025\165\001\001\000\002\001" +
    "\001\000\004\006\154\001\001\000\002\001\001\000\014" +
    "\005\152\014\042\015\041\016\035\017\047\001\001\000" +
    "\014\005\150\014\042\015\041\016\035\017\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\031\004\032\006\007\020\021" +
    "\021\025\001\001\000\012\004\115\006\007\020\021\021" +
    "\025\001\001\000\002\001\001\000\014\005\045\014\042" +
    "\015\041\016\035\017\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\114\014\042" +
    "\015\041\016\035\017\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\112\014\042\015\041\016\035\017\047\001\001\000" +
    "\002\001\001\000\014\005\051\014\042\015\041\016\035" +
    "\017\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\111\014\042\015\041\016\035" +
    "\017\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\102\014\042\015\041\016\035\017\047\001\001" +
    "\000\014\005\101\014\042\015\041\016\035\017\047\001" +
    "\001\000\014\005\100\014\042\015\041\016\035\017\047" +
    "\001\001\000\014\005\077\014\042\015\041\016\035\017" +
    "\047\001\001\000\014\005\076\014\042\015\041\016\035" +
    "\017\047\001\001\000\014\005\075\014\042\015\041\016" +
    "\035\017\047\001\001\000\014\005\074\014\042\015\041" +
    "\016\035\017\047\001\001\000\014\005\073\014\042\015" +
    "\041\016\035\017\047\001\001\000\014\005\072\014\042" +
    "\015\041\016\035\017\047\001\001\000\014\005\071\014" +
    "\042\015\041\016\035\017\047\001\001\000\014\005\070" +
    "\014\042\015\041\016\035\017\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\104\014\042\015\041\016\035\017" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\005\107\014\042\015\041\016\035\017\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\117\014\042\015\041\016\035\017\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\122\014\042\015\041\016\035\017\047\001\001\000\002" +
    "\001\001\000\014\005\124\014\042\015\041\016\035\017" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\127\004\032\006\007\020\021\021\025\001\001\000" +
    "\012\004\115\006\007\020\021\021\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\134\004\032\006\007\020\021\021\025\001\001\000\012" +
    "\004\115\006\007\020\021\021\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\147\014\042\015\041" +
    "\016\035\017\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\161\014\042\015\041" +
    "\016\035\017\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\170\004\032\006\007\020" +
    "\021\021\025\001\001\000\014\004\115\006\007\012\174" +
    "\020\021\021\025\001\001\000\014\003\210\004\032\006" +
    "\007\020\021\021\025\001\001\000\002\001\001\000\014" +
    "\005\205\014\042\015\041\016\035\017\047\001\001\000" +
    "\002\001\001\000\014\003\203\004\032\006\007\020\021" +
    "\021\025\001\001\000\014\005\200\014\042\015\041\016" +
    "\035\017\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\202\004\032\006\007\020\021\021\025\001" +
    "\001\000\012\004\115\006\007\020\021\021\025\001\001" +
    "\000\012\004\115\006\007\020\021\021\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\207\004\032" +
    "\006\007\020\021\021\025\001\001\000\012\004\115\006" +
    "\007\020\021\021\025\001\001\000\012\004\115\006\007" +
    "\020\021\021\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\214\001\001\000\002\001\001\000\014" +
    "\005\216\014\042\015\041\016\035\017\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\221\004\032" +
    "\006\007\020\021\021\025\001\001\000\012\004\115\006" +
    "\007\020\021\021\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\005\225\014\042\015\041\016\035\017" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\230\004\032\006\007\020\021\021\025\001\001\000" +
    "\012\004\115\006\007\020\021\021\025\001\001\000\014" +
    "\003\232\004\032\006\007\020\021\021\025\001\001\000" +
    "\012\004\115\006\007\020\021\021\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\236\006\007\020" +
    "\021\021\025\022\240\023\242\001\001\000\002\001\001" +
    "\000\014\005\257\014\042\015\041\016\035\017\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\236" +
    "\006\007\020\021\021\025\022\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\236\006\007\020\021\021\025\022\240\023\252\001\001" +
    "\000\014\004\236\006\007\020\021\021\025\022\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\263\004\032\006\007\020\021" +
    "\021\025\001\001\000\012\004\115\006\007\020\021\021" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\270\004\032\006\007\020\021\021\025\001\001\000" +
    "\002\001\001\000\012\004\115\006\007\020\021\021\025" +
    "\001\001\000\002\001\001\000\004\007\273\001\001\000" +
    "\002\001\001\000\014\003\275\004\032\006\007\020\021" +
    "\021\025\001\001\000\012\004\115\006\007\020\021\021" +
    "\025\001\001\000\002\001\001\000\014\005\300\014\042" +
    "\015\041\016\035\017\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\310\010\306\014\042\015\041\016" +
    "\035\017\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\005\313\014\042\015\041\016" +
    "\035\017\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Statement> AST;
    public LinkedList<SintaxError> errors = new LinkedList<>();

    public void syntax_error(Symbol s){
            if (s.value != null)
                errors.add(new SintaxError(s.value.toString(), s.left, s.right));
    } 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
            throw new Exception("Error irrecuperable en (linea, columna): " + s.left + ", " + s.right);
    }  
  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= START mainstatements END 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		parser.AST=s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainstatements ::= mainstatements mainstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mainstatements",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // mainstatements ::= mainstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Statement>(); RESULT.add(s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mainstatements",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // mainstatement ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mainstatement",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // mainstatement ::= definitionprocedure 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement d = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = d;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("mainstatement",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statements ::= statements statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Statement>(); RESULT.add(s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= ENTER name_list AS TYPEDEF WITH_VALUE expr DOTCOMMA 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Declaration(n, t, e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= name_list ARROW expr DOTCOMMA 
            {
              Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Assignment(n, e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= if 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		If i = (If)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=i;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement ::= for 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		For f = (For)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // statement ::= WHILE expr DO statements ENDWHILE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new While(e, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // statement ::= WHILE expr DO ENDWHILE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new While(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= REPEAT statements ENDREPEAT expr 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Repeat(s, e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= REPEAT ENDREPEAT expr 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Repeat(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= EXEC func DOTCOMMA 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Execute f = (Execute)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = f;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= PRINT expr DOTCOMMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Print(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= PRINTLN expr DOTCOMMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Println(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= SWITCH expr DO cases ENDSWITCH 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Switch(e, c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= SWITCH expr DO cases ELSE THEN statements ENDSWITCH 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Switch(e, c, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= error DOTCOMMA 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= error ENDIF 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= error ENDFOR 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= error ENDWHILE 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= error ENDPROCEDURE 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= error ENDFUNCTION 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= error ENDSWITCH 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= error ENDREPEAT expr 
            {
              Statement RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // definitionprocedure ::= DEFPROCEDURE ID statements ENDPROCEDURE 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Procedure(f, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("definitionprocedure",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // definitionprocedure ::= DEFPROCEDURE ID PARAMS PARSTART params_list PAREND statements ENDPROCEDURE 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Param> p = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Procedure(f, p, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("definitionprocedure",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // definitionprocedure ::= FUNCTION ID TYPEDEF funcstatements ENDFUNCTION 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Function(f, t, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("definitionprocedure",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // definitionprocedure ::= FUNCTION ID TYPEDEF PARAMS PARSTART params_list PAREND funcstatements ENDFUNCTION 
            {
              Statement RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Param> p = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Function(f, t, p, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("definitionprocedure",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funcstatement ::= statement 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcstatement",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcstatement ::= RETURN expr DOTCOMMA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Return(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcstatement",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcstatements ::= funcstatements funcstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=s; RESULT.add(t);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcstatements",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcstatements ::= funcstatement 
            {
              LinkedList<Statement> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Statement>(); RESULT.add(s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcstatements",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // if ::= IF expr THEN statements ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= IF expr THEN statements ELSE statements ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Statement> p = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, p, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= IF expr THEN statements elifs ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, s, f, null);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if ::= IF expr THEN statements elifs ELSE statements ENDIF 
            {
              If RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> p = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new If(e, s, f, p);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // for ::= FOR ID ARROW expr TO expr DO statements ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new For(i, e, f, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // for ::= FOR ID ARROW expr TO expr WITHINCREMENTAL NUM DO statements ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new For(i, e, f, n, s);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // for ::= FOR ID ARROW expr TO expr DO ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new For(i, e, f);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // for ::= FOR ID ARROW expr TO expr WITHINCREMENTAL NUM DO ENDFOR 
            {
              For RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new For(i, e, f, n);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // params_list ::= params_list COMMA ID TYPEDEF 
            {
              LinkedList<Param> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Param> p = (LinkedList<Param>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = p; RESULT.add(new Param(i, t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // params_list ::= ID TYPEDEF 
            {
              LinkedList<Param> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Param>(); RESULT.add(new Param(i, t));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("params_list",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // args_list ::= args_list COMMA expr 
            {
              LinkedList<Operation> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Operation> a = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a; RESULT.add(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // args_list ::= expr 
            {
              LinkedList<Operation> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Operation>(); RESULT.add(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args_list",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // name_list ::= name_list COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> n = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = n; RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // name_list ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<String>(); RESULT.add(i);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("name_list",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // func ::= ID PARSTART PAREND 
            {
              Execute RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Execute(f);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // func ::= ID PARSTART args_list PAREND 
            {
              Execute RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Operation> a = (LinkedList<Operation>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Execute(f, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("func",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // elifs ::= elifs ELIF expr THEN statements 
            {
              LinkedList<Elif> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Elif> f = (LinkedList<Elif>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = f; RESULT.add(new Elif(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elifs",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // elifs ::= ELIF expr THEN statements 
            {
              LinkedList<Elif> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Elif>(); RESULT.add(new Elif(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elifs",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cases ::= cases OPENQUESTION expr CLOSEQUESTION THEN statements 
            {
              LinkedList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Case> c = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = c; RESULT.add(new Case(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cases ::= OPENQUESTION expr CLOSEQUESTION THEN statements 
            {
              LinkedList<Case> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Statement> s = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<Case>(); RESULT.add(new Case(e, s));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cases",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= symbols 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation s = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = s;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= unitary 
            {
              Operation RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation u = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = u;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= aritmetic 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= logical 
            {
              Operation RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation l = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = l;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= PARSTART expr PAREND 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operation(e);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aritmetic ::= expr ADD expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.ADD, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // aritmetic ::= expr SUBSTRACT expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.SUBSTRACT, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // aritmetic ::= expr MULTIPLY expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MULTIPLY, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // aritmetic ::= expr DIVISION expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.DIVISION, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // aritmetic ::= expr POW SBRACKETOPEN expr SBRACKETCLOSE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operation(a, EnumOperations.POW, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // aritmetic ::= expr MODULE SBRACKETOPEN expr SBRACKETCLOSE 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Operation(a, EnumOperations.MODULE, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // aritmetic ::= NUM 
            {
              Operation RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(n, EnumTerminals.NUM);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("aritmetic",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logical ::= expr MAJOR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MAJOR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logical ::= expr MINOR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MINOR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logical ::= expr MAJOREQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MAJOREQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logical ::= expr MINOREQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.MINOREQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logical ::= expr EQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.EQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logical ::= expr NOTEQUALS expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.NOTEQUALS, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logical ::= expr AND expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.AND, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logical ::= expr OR expr 
            {
              Operation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(a, EnumOperations.OR, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logical ::= BOOLEAN 
            {
              Operation RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(b, EnumTerminals.BOOLEAN);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logical",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // symbols ::= ID 
            {
              Operation RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(i, EnumTerminals.ID);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("symbols",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // symbols ::= STR 
            {
              Operation RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(s, EnumTerminals.STR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("symbols",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // symbols ::= CHAR 
            {
              Operation RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(c, EnumTerminals.CHAR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("symbols",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unitary ::= SUBSTRACT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(e, EnumUnitaryOperations.NEGATIVE);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("unitary",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unitary ::= NOT expr 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Operation(e, EnumUnitaryOperations.NOT);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("unitary",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
